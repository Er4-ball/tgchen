import os
import logging
import sqlite3
import asyncio
from datetime import datetime, timedelta
from flask import Flask
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup, ChatInviteLink
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler
from pathlib import Path
from datetime import datetime, timedelta, time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
PROVIDER_TOKEN = os.getenv('PROVIDER_TOKEN')

# –¢–∞—Ä–∏—Ñ—ã (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
TARIFFS = {
    '1_month': {'price': 29900, 'days': 30, 'label': '1 –º–µ—Å—è—Ü - 299‚ÇΩ'},
    '3_months': {'price': 79900, 'days': 90, 'label': '3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ'},
    '6_months': {'price': 149900, 'days': 180, 'label': '6 –º–µ—Å—è—Ü–µ–≤ - 1499‚ÇΩ'},
    '1_year': {'price': 299900, 'days': 365, 'label': '1 –≥–æ–¥ - 2999‚ÇΩ'}
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = Path(__file__).parent
DATABASE_NAME = DATA_DIR / "subscriber.db"

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Bot is running"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscriber (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            subscription_end TEXT,
            payment_date TEXT DEFAULT CURRENT_TIMESTAMP,
            tariff TEXT,
            invite_link TEXT
        )
        """)
        
        cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_subscription_end 
        ON subscriber(subscription_end)
        """)
        
        conn.commit()
        conn.close()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {DATABASE_NAME}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã: {e}")
        raise

def add_subscriber(user_id: int, username: str, full_name: str, tariff: str, invite_link: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    day = TARIFFS[tariff]['days']
    subscription_end = (datetime.now() + timedelta(days=day)).strftime('%Y-%m-%d %H:%M:%S')
    
    cursor.execute("""
    INSERT OR REPLACE INTO subscriber (user_id, username, full_name, subscription_end, tariff, invite_link)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, username, full_name, subscription_end, tariff, invite_link))
    
    conn.commit()
    conn.close()

def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("""
    SELECT subscription_end FROM subscriber 
    WHERE user_id = ? AND subscription_end > ?
    """, (user_id, current_time))
    
    result = cursor.fetchone()
    conn.close()
    
    return result is not None

def get_subscriber_info(user_id: int) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT username, full_name, subscription_end, tariff, invite_link FROM subscriber 
    WHERE user_id = ?
    """, (user_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            "username": result[0],
            "full_name": result[1],
            "subscription_end": result[2],
            "tariff": result[3],
            "invite_link": result[4]
        }
    return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='choose_tariff')],
        [InlineKeyboardButton("üîê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='check')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/mitsuki1221")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='refresh')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_tariff_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞"""
    keyboard = [
        [InlineKeyboardButton(TARIFFS['1_month']['label'], callback_data='tariff_1_month')],
        [InlineKeyboardButton(TARIFFS['3_months']['label'], callback_data='tariff_3_months')],
        [InlineKeyboardButton(TARIFFS['6_months']['label'], callback_data='tariff_6_months')],
        [InlineKeyboardButton(TARIFFS['1_year']['label'], callback_data='tariff_1_year')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üîÆ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º:",
        reply_markup=get_main_keyboard()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'choose_tariff':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_tariff_keyboard()
        )
    elif query.data == 'back':
        await query.edit_message_text(
            "üîÆ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º:",
            reply_markup=get_main_keyboard()
        )
    elif query.data.startswith('tariff_'):
        tariff = query.data.replace('tariff_', '')
        await send_invoice(update, context, tariff)
    elif query.data == 'check':
        if check_subscription(query.from_user.id):
            user_info = get_subscriber_info(query.from_user.id)
            end_date = user_info['subscription_end'][:10]
            tariff_label = TARIFFS.get(user_info['tariff'], {}).get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')
            await query.edit_message_text(
                f"‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {end_date}\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff_label}\n"
                f"–ö–∞–Ω–∞–ª: CryptoSignals HQ\n\n"
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤—ã –≤—ã–π–¥–µ—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, "
                f"–≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞–Ω–æ–≤–æ!",
                reply_markup=get_main_keyboard()
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞",
                reply_markup=get_main_keyboard()
            )
    elif query.data == 'refresh':
        await query.edit_message_text(
            "üîÆ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º:",
            reply_markup=get_main_keyboard()
        )

async def send_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, tariff: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã"""
    query = update.callback_query
    tariff_info = TARIFFS[tariff]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tariff_info['label'].split(' - ')[0]}",
        description=f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –Ω–∞ {tariff_info['label']}",
        payload=f"subscription_{tariff}",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(tariff_info['label'], tariff_info['price'])],
        need_email=True
    )

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("subscription_"):
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã")

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    user = update.effective_user
    tariff = update.message.successful_payment.invoice_payload.replace('subscription_', '')
    days = TARIFFS[tariff]['days']
    
    try:
        invite_link = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            name=f"sub_{user.id}"
        )
        
        add_subscriber(
            user_id=user.id,
            username=user.username,
            full_name=user.full_name,
            tariff=tariff,
            invite_link=invite_link.invite_link
        )
        
        message = await update.message.reply_text(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:\n"
            f"{invite_link.invite_link}\n\n"
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n"
            f"1. –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è\n"
            f"2. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π\n"
            f"3. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º\n"
            f"4. –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞–Ω–æ–≤–æ!\n"
            f"5. –ù–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –º–µ–Ω—é, –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ!",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_keyboard()
        )

async def track_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
    if update.message.chat.id == CHANNEL_ID:
        for user in update.message.new_chat_members:
            if user.id != context.bot.id:
                if check_subscription(user.id):
                    try:
                        await context.bot.send_message(
                            chat_id=user.id,
                            text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª!",
                            reply_markup=get_main_keyboard()
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

async def check_expired_subscription(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("""
    SELECT user_id FROM subscriber 
    WHERE subscription_end <= ?
    """, (current_time,))
    
    expired_user = cursor.fetchall()
    
    for user in expired_user:
        user_id = user[0]
        try:
            await context.bot.ban_chat_member(
                chat_id=CHANNEL_ID,
                user_id=user_id,
                until_date=int((datetime.now() + timedelta(days=365)).timestamp())
            )
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.\n"
                         "–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
                    reply_markup=get_main_keyboard()
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
            cursor.execute("DELETE FROM subscriber WHERE user_id = ?", (user_id,))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
    
    conn.commit()
    conn.close()

async def check_upcoming_expiration(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT user_id, subscription_end FROM subscriber 
    WHERE subscription_end BETWEEN datetime('now') AND datetime('now', '+1 day')
    """)
    
    expiring_user = cursor.fetchall()
    
    for user in expiring_user:
        user_id = user[0]
        expiration_date = datetime.fromisoformat(user[1]).strftime('%Y-%m-%d')
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {expiration_date}!\n"
                     f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.close()

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.getenv('PORT', 5000))
    flask_app.run(host='0.0.0.0', port=port)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å JobQueue
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(PreCheckoutQueryHandler(precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.ChatType.CHANNEL & filters.StatusUpdate.NEW_CHAT_MEMBERS, track_new_member))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JobQueue
    if hasattr(app, 'job_queue'):
        app.job_queue.run_repeating(check_expired_subscription, interval=21600, first=10)
        app.job_queue.run_daily(check_upcoming_expiration, time=time(hour=12, minute=0))
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    Thread(target=run_flask).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ
    app.run_polling()

if __name__ == '__main__':
    main()
